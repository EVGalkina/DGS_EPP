q5 <- c(5,5,2,NA,1)
leadership <- data.frame(manager, date, country, gender, age,q1,q2,q3,q4,q5, stringsAsFactors = F )
#to change variable:
leadership$age[leadership$age == 99] <- NA
# variable[condition] <- expression
#create variable:
leadership$agecat[leadership$age < 55] <- "Young"
#do same but within one code chunk:
leadership <- within(leadership, {
agecat <- NA
agecat[age > 75] <- "Elder"
agecat[age >= 55 & age <= 75] <- "Middle Aged"
agecat[age <55] <- "Young"
})
# to rename the column header you can go with:
names(leadership)[2] <- "testDate" # renames second column in df 'Leadership"
# or
names(leadership)[6:10] <- c("Q1", "Q2", "Q3", "Q4", "Q5")
# or
leadership <- rename(leadership, c( "managerID" = "manager"))
#missing values: na.omit() removes all rows with NA ***what is the difference from drop_na()?
#look for more sophisticated ways to deal with NA
leadership_new <- na.omit(leadership)
#random samples:
mysample <- leadership[sample(1:nrow(leadership),3, replace=FALSE), ]
#sample(vector to chose from,# of elements to select, replace or not)
#dealing with dates
myformat <- "%m/%d/%y"
leadership$date <- as.Date(leadership$date, myformat)
str(leadership$date)
date()
today <- Sys.Date()
mybirthday <- as.Date("1992-04-27")
difftime(today, mybirthday, units = "weeks" )
#change the format of the date via format()
format(mybirthday, format = "%A")
leadership$date <- format(leadership$date, format = "%Y-%b-%d, %a")
leadership$date <- as.character(leadership$date)
str(leadership$date)
#cleaning and manipulating data
manager <- c(1,2,3,4,5)
date <- c("10/24/08", "10/28/08", "10/1/08", "10/12/08", "5/1/09")
country <- c( "US", "US", "UK", "UK", "UK")
gender <- c("M", "F", "F", "M", "F")
age <- c(32,45,25,39,99)
q1 <- c(5,3,3,3,2)
q2 <- c(4,5,5,3,2)
q3 <- c(5,2,4,1,1)
q4 <- c(5,5,5, NA, 2)
q5 <- c(5,5,2,NA,1)
leadership <- data.frame(manager, date, country, gender, age,q1,q2,q3,q4,q5, stringsAsFactors = F )
#to change variable:
leadership$age[leadership$age == 99] <- NA
# variable[condition] <- expression
#create variable:
leadership$agecat[leadership$age < 55] <- "Young"
#do same but within one code chunk:
leadership <- within(leadership, {
agecat <- NA
agecat[age > 75] <- "Elder"
agecat[age >= 55 & age <= 75] <- "Middle Aged"
agecat[age <55] <- "Young"
})
# to rename the column header you can go with:
names(leadership)[2] <- "testDate" # renames second column in df 'Leadership"
# or
names(leadership)[6:10] <- c("Q1", "Q2", "Q3", "Q4", "Q5")
# or
leadership <- rename(leadership, c( "managerID" = "manager"))
#missing values: na.omit() removes all rows with NA ***what is the difference from drop_na()?
#look for more sophisticated ways to deal with NA
#leadership_new <- na.omit(leadership)
#random samples:
mysample <- leadership[sample(1:nrow(leadership),3, replace=FALSE), ]
#sample(vector to chose from,# of elements to select, replace or not)
#dealing with dates
myformat <- "%m/%d/%y"
leadership$date <- as.Date(leadership$date, myformat)
str(leadership$date)
date()
today <- Sys.Date()
mybirthday <- as.Date("1992-04-27")
difftime(today, mybirthday, units = "weeks" )
#change the format of the date via format()
format(mybirthday, format = "%A")
leadership$date <- format(leadership$date, format = "%Y-%b-%d, %a")
leadership$date <- as.character(leadership$date)
str(leadership$date)
View(leadership)
leadership$date <- as.Date(leadership$date, myformat)
str(leadership$date)
str(leadership$testDate)
#dealing with dates
myformat <- "%m/%d/%y"
leadership$testDate <- as.Date(leadership$date, myformat)
str(leadership$date)
date()
today <- Sys.Date()
mybirthday <- as.Date("1992-04-27")
difftime(today, mybirthday, units = "weeks" )
#change the format of the date via format()
format(mybirthday, format = "%A")
leadership$date <- format(leadership$date, format = "%Y-%b-%d, %a")
leadership$date <- as.character(leadership$date)
str(leadership$date)
leadership$testDate <- as.Date(leadership$testDate, myformat)
str(leadership$testDate)
date()
#dealing with dates
myformat <- "%m/%d/%y"
leadership$testDate <- as.Date(leadership$testDate, myformat)
str(leadership$testDate)
date()
today <- Sys.Date()
mybirthday <- as.Date("1992-04-27")
difftime(today, mybirthday, units = "weeks" )
#change the format of the date via format()
format(mybirthday, format = "%A")
leadership$date <- format(leadership$date, format = "%Y-%b-%d, %a")
leadership$date <- as.character(leadership$date)
str(leadership$date)
yformat <- "%m/%d/%y"
myformat <- "%m/%d/%y"
View(leadership)
#cleaning and manipulating data
manager <- c(1,2,3,4,5)
date <- c("10/24/08", "10/28/08", "10/1/08", "10/12/08", "5/1/09")
country <- c( "US", "US", "UK", "UK", "UK")
gender <- c("M", "F", "F", "M", "F")
age <- c(32,45,25,39,99)
q1 <- c(5,3,3,3,2)
q2 <- c(4,5,5,3,2)
q3 <- c(5,2,4,1,1)
q4 <- c(5,5,5, NA, 2)
q5 <- c(5,5,2,NA,1)
leadership <- data.frame(manager, date, country, gender, age,q1,q2,q3,q4,q5, stringsAsFactors = F )
#to change variable:
leadership$age[leadership$age == 99] <- NA
# variable[condition] <- expression
#create variable:
leadership$agecat[leadership$age < 55] <- "Young"
#do same but within one code chunk:
leadership <- within(leadership, {
agecat <- NA
agecat[age > 75] <- "Elder"
agecat[age >= 55 & age <= 75] <- "Middle Aged"
agecat[age <55] <- "Young"
})
# to rename the column header you can go with:
names(leadership)[2] <- "testDate" # renames second column in df 'Leadership"
# or
names(leadership)[6:10] <- c("Q1", "Q2", "Q3", "Q4", "Q5")
# or
leadership <- rename(leadership, c( "managerID" = "manager"))
#missing values: na.omit() removes all rows with NA ***what is the difference from drop_na()?
#look for more sophisticated ways to deal with NA
#leadership_new <- na.omit(leadership)
#random samples:
mysample <- leadership[sample(1:nrow(leadership),3, replace=FALSE), ]
#sample(vector to chose from,# of elements to select, replace or not)
#dealing with dates
myformat <- "%m/%d/%y"
leadership$testDate <- as.Date(leadership$testDate, myformat)
str(leadership$testDate)
date()
today <- Sys.Date()
mybirthday <- as.Date("1992-04-27")
difftime(today, mybirthday, units = "weeks" )
#change the format of the date via format()
format(mybirthday, format = "%A")
leadership$date <- format(leadership$date, format = "%Y-%b-%d, %a")
leadership$date <- as.character(leadership$date)
str(leadership$date)
today <- Sys.Date()
mybirthday <- as.Date("1992-04-27")
difftime(today, mybirthday, units = "weeks" )
install.packages("sqldf")
library(sqldf)
install.packages("sqldf")
library(sqldf)
cars_by_sql <- sqldf("select * from mtcars where carb=1 order by mpg", row.names = T)
cars_by_sql1 <- sqldf("select avg(mpg) as avg_mpg, avg(disp) as avg_disp, gear from mtcars where cyl in (4,6) group by gear")
install.packages("sqldf")
install.packages("sqldf")
#install.packages("sqldf")
library(sqldf)
cars_by_sql <- sqldf("select * from mtcars where carb=1 order by mpg", row.names = T)
cars_by_sql1 <- sqldf("select avg(mpg) as avg_mpg, avg(disp) as avg_disp, gear from mtcars where cyl in (4,6) group by gear")
y <- 1:9
dim(y) <- c(3,3)
dim(y)
?csum()
?csum
which(mysample)
which(LETTERS == "R")
which(ll <- c(TRUE, FALSE, TRUE, NA, FALSE, FALSE, TRUE)) #> 1 3 7
names(ll) <- letters[seq(ll)]
which(ll)
which((1:12)%%2 == 0) # which are even?
which(1:10 > 3, arr.ind = TRUE)
which("mysample")
mystats <- function(x, parametric=TRUE, print = FALSE){
if(parametric) {
center <- mean(x); spread <- sd(x)
} else {
center <- meadian (x); spread <- mad(x)
}
if (print & parametric) {
cat("Mean =", center, "\n", "MAD =", spread, "\n")
} else if (print & !parametric){
cat("Median =", center, "\n", "MAD =", spread, "\n")
}
result <- list(center=center, spread=spread)
return(result)
}
#my_function <- function (agr1, agr2,...) {
# statements
# return(object)}
mystats <- function(x, parametric=TRUE, print = FALSE){
if(parametric) {
center <- mean(x); spread <- sd(x)
} else {
center <- meadian (x); spread <- mad(x)
}
if (print & parametric) {
cat("Mean =", center, "\n", "MAD =", spread, "\n")
} else if (print & !parametric){
cat("Median =", center, "\n", "MAD =", spread, "\n")
}
result <- list(center=center, spread=spread)
return(result)
}
View(mystats)
View(mystats)
View(mystats)
x <- rnorm(500)
mystats(x, parametric = FALSE)
mystats(x, parametric = FALSE)
#my_function <- function (agr1, agr2,...) {
# statements
# return(object)}
mystats <- function(x, parametric=TRUE, print = FALSE){
if(parametric) {
center <- mean(x); spread <- sd(x)
} else {
center <- meadian(x); spread <- mad(x)
}
if (print & parametric) {
cat("Mean =", center, "\n", "MAD =", spread, "\n")
} else if (print & !parametric){
cat("Median =", center, "\n", "MAD =", spread, "\n")
}
result <- list(center=center, spread=spread)
return(result)
}
x <- rnorm(500)
mystats(x, parametric = FALSE)
library(stats)
library(stats)
#my_function <- function (agr1, agr2,...) {
# statements
# return(object)}
mystats <- function(x, parametric=TRUE, print = FALSE){
if(parametric) {
center <- mean(x); spread <- sd(x)
} else {
center <- meadian(x); spread <- mad(x)
}
if (print & parametric) {
cat("Mean =", center, "\n", "MAD =", spread, "\n")
} else if (print & !parametric){
cat("Median =", center, "\n", "MAD =", spread, "\n")
}
result <- list(center=center, spread=spread)
return(result)
}
x <- rnorm(500)
mystats(x, parametric = FALSE)
median(c(5,6,7,8,8,6,6))
mystats(x)
x
mystats(x. parametric = T)
mystats(x. parametric = F, print = TRUE)
mystats(x, parametric = F, print = TRUE)
library(stats)
#my_function <- function (agr1, agr2,...) {
# statements
# return(object)}
mystats <- function(x, parametric=TRUE, print = FALSE){
if(parametric) {
center <- mean(x); spread <- sd(x)
} else {
center <- median(x); spread <- mad(x)
}
if (print & parametric) {
cat("Mean =", center, "\n", "MAD =", spread, "\n")
} else if (print & !parametric){
cat("Median =", center, "\n", "MAD =", spread, "\n")
}
result <- list(center=center, spread=spread)
return(result)
}
x <- rnorm(500)
mystats(x, parametric = F, print = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(data.table)
library(knitr)
library(readr)
setwd("C:/SCP/DGS_data/DGS_EPP")
#merge all csv files.
multmerge = function(path){
filenames=list.files(path=path, full.names=TRUE)
rbindlist(lapply(filenames, fread))
}
path <- "C:/SCP/DGS_data/DGS_EPP/files"
eprocure <- multmerge(path)
fwrite(eprocure, "eprocure.csv")
eprocure_drop <- eprocure %>%  drop_na(UNSPSC)
View(eprocure)
View(eprocure)
View(eprocure)
#create the frequency table with the most used UNSPSC
unspsc_used <- as.data.frame(table(eprocure$UNSPSC))
#upload codebook for purchased items
unspsc_codes <- read_csv("unspsc_codes.csv")
#rename the column for future join by Commodity codes
unspsc_used <- unspsc_used %>% rename("Commodity" = "Var1")
#turn all used codes into factors
unspsc_codes <- unspsc_codes %>%
mutate(Commodity = as.factor(Commodity), Family = as.factor(Family), Class = as.factor(Class), Segment = as.factor(Segment))
#perform innerjoin
unspsc_comodity <- inner_join(unspsc_codes,unspsc_used, by = "Commodity")
unspsc_comodity %>%  arrange(desc(Freq)) %>%
head(5)
#initially 10031 distinct codes used, unspsc joined by commodity resulted in 8011 used codes
#find what other codes left
not_commodity <- anti_join (unspsc_used, unspsc_comodity, by = "Commodity")
#rename and select columns to join to code book by Family
not_commodity <- rename(not_commodity, "Family" = "Commodity")
unspsc_family <- unspsc_codes [, c(3,4)]
unspsc_family <- unspsc_family %>%  mutate(Family = as.factor(Family))
unspsc_family <- inner_join(unspsc_family, not_commodity, by = "Family") %>%
distinct()
#codes by family resulted in 28 observations
#check if item class was used
unspsc_class <- unspsc_codes[, c(5,6)]
not_commodity <- not_commodity %>%  rename("Class" = "Family")
unspsc_class <- unspsc_class %>%  mutate(Class = as.factor(Class))
unspsc_class <- inner_join(unspsc_class, not_commodity, by = "Class") %>%
distinct()
#resulted in 1905 observations
#segment codes were not used at all
unspsc_segment <- unspsc_codes[, c(1,2)]
not_commodity <- not_commodity %>%  rename("Segment" = "Class")
unspsc_segment <- inner_join(unspsc_codes, not_commodity, by = "Segment") %>%
distinct()
View(unspsc_codes)
View(unspsc_codes)
View(eprocure_drop)
View(eprocure_drop)
View(eprocure)
View(eprocure)
View(unspsc_codes)
View(unspsc_codes)
gc()
cars <- mtcars[1:5, 1:4]
t(cars)
cars <- mtcars[1:5, 1:4]
cars
t(cars)
t(cars) #pivot the table
t(cars) #pivot the table
aggdata <- aggregate(mtcars, by=list(cyl,gear), FUN=mean, na.rm = T)
aggdata <- aggregate(mtcars, by=list(mtcars$cyl, mtcars$gear), FUN=mean, na.rm = T)
aggdata
cars <- mtcars[1:5, 1:4]
cars
t(cars) #pivot the table from long to wide
aggdata <- aggregate(mtcars, by=list(mtcars$cyl, mtcars$gear), FUN=mean, na.rm = T)
aggdata
aggdata <- aggregate(mtcars, by=list(group.cyl = mtcars$cyl, group.gear = mtcars$gear), FUN=mean, na.rm = T)
#group.1 here is cylinders, and group.2 is number of gears. It summarize data for all possible combinations cyl and gear.
aggdata
library(reshape2)
ID <- c(1,2,3,4)
time <- c(1,2,1,2)
x1 <- c(5,3,6,2)
x2 <- c(6,5,1,4)
mydata_reshape <- data.frame(ID, time, x1, x2, stringsAsFactors = F)
melted <- melt(mydata_reshape, id = c("ID", "time"))
View(melted)
ID <- c(1,1,2,2)
time <- c(1,2,1,2)
x1 <- c(5,3,6,2)
x2 <- c(6,5,1,4)
mydata_reshape <- data.frame(ID, time, x1, x2, stringsAsFactors = F)
melted <- melt(mydata_reshape, id = c("ID", "time"))
View(melted)
melted <- melt(mydata_reshape, id = c("x1", "x2"))
melted <- melt(mydata_reshape, id = c("ID", "time"))
newdata_reshaped <- dcast(melted, ID + time ~ variable)
View(newdata_reshaped)
newdata_reshaped <- dcast(melted, ID ~ time, mean)
newdata_reshaped <- dcast(melted, ID ~ variable, mean)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("vcd")
library(vcd)
#BAR PLOTS
barplot(table(Arthritis$Improved))
#BAR PLOTS
barplot(table(Arthritis$Improved), main = "Simple Bar Plot", horiz = TRUE)
# STAKED BARS
count <- table(Arthritis$Improved, Arthritis$Treatment)
count
barplot(count, main = "Bar name", xlab = "x name", ylab = "y name", col = c("red", "blue", "yellow"))
barplot(count, main = "Bar name", xlab = "x name", ylab = "y name", col = c("red", "blue", "yellow"), legend = rownames(counts))
barplot(count, main = "Bar name", xlab = "x name", ylab = "y name", col = c("red", "blue", "yellow"), legend = rownames(count))
barplot(count, main = "Bar name", xlab = "x name", ylab = "y name", col = c("red", "blue", "yellow"), legend = rownames(count), beside = T)
barplot(count, main = "Bar name", xlab = "x name", ylab = "y name", col = c("red", "blue", "yellow"), legend = rownames(count) #, beside = T)
barplot(count, main = "Bar name", xlab = "x name", ylab = "y name", col = c("red", "blue", "yellow"), legend = rownames(count)) #, beside = T)
barplot(count, main = "Bar name", xlab = "x name", ylab = "y name", col = c("red", "blue", "yellow"), legend = rownames(count)) #, beside = T)
#bar plots are not necessary representing counts or frequency; it also can represent means, media
data(state.region)
#bar plots are not necessary representing counts or frequency; it also can represent means, media
Arthritis
means <- aggregate(Arthritis$Age, by=list(Arthritis$Sex), FUN = mean)
means
barplot(means$x, names.arg = means$Group.1)
title("Mean Age")
title("Mean Age of patiens with arthrisis")
barplot(means$x, names.arg = means$Group.1)
title("Mean Age of patiens with arthrisis")
#spinograms
spine(count, main = "Spinogram Example")
par(mfrow = c(2,2))
pie(slices, labels = lbls)
slices <- c(10,12,4,16,8)
lbls <- c("UK", "US", "UA", "FR", "GER")
pie(slices, labels = lbls)
pct <- round(slices/sum(slices)/100)
lbls2 <- paste(lbls, " ", pct< "%", sep = "")
pie(slices, labels = lbls2, col = rainbow(lbls))
par(mfrow = c(2,2))
slices <- c(10,12,4,16,8)
lbls <- c("UK", "US", "UA", "FR", "GER")
pie(slices, labels = lbls)
pct <- round(slices/sum(slices)/100)
lbls2 <- paste(lbls, " ", pct< "%", sep = "")
pie(slices, labels = lbls2, col = rainbow(lbls))
pie(slices, labels = lbls2, col = rainbow(length(lbls)))
lbls2 <- paste(lbls, " ", pct, "%", sep = "")
pie(slices, labels = lbls2, col = rainbow(length(lbls)))
par(mfrow = c(2,2))
slices <- c(10,12,4,16,8)
lbls <- c("UK", "US", "UA", "FR", "GER")
pie(slices, labels = lbls)
pct <- round(slices/sum(slices)/100)
lbls2 <- paste(lbls, " ", pct, "%", sep = "")
pie(slices, labels = lbls2, col = rainbow(length(lbls)))
pct <- round(slices/sum(slices)*100)
par(mfrow = c(2,2))
slices <- c(10,12,4,16,8)
lbls <- c("UK", "US", "UA", "FR", "GER")
pie(slices, labels = lbls)
pct <- round(slices/sum(slices)*100)
lbls2 <- paste(lbls, " ", pct, "%", sep = "")
pie(slices, labels = lbls2, col = rainbow(length(lbls)))
library(plotrix)
install.packages(plotrix)
$ install.packages("plotrix")
install.packages("plotrix")
library(plotrix)
pie3D(slices, labels = lbls, explode = 0.1)
slices <- c(10,12,4,16,8)
lbls <- c("UK", "US", "UA", "FR", "GER")
pie(slices, labels = lbls)
pct <- round(slices/sum(slices)*100)
lbls2 <- paste(lbls, " ", pct, "%", sep = "")
pie(slices, labels = lbls2, col = rainbow(length(lbls)))
install.packages("plotrix")
library(plotrix)
pie3D(slices, labels = lbls, explode = 0.1)
install.packages("plotrix")
slices <- c(10,12,4,16,8)
lbls <- c("UK", "US", "UA", "FR", "GER")
pie(slices, labels = lbls)
fan.plot(slices, labels = lbls)
slices <- c(10,12,4,16,8)
lbls <- c("UK", "US", "UA", "FR", "GER")
pie(slices, labels = lbls)
pct <- round(slices/sum(slices)*100)
lbls2 <- paste(lbls, " ", pct, "%", sep = "")
pie(slices, labels = lbls2, col = rainbow(length(lbls)))
install.packages("plotrix")
library(plotrix)
pie3D(slices, labels = lbls, explode = 0.1)
fan.plot(slices, labels = lbls)
install.packages("plotrix")
slices <- c(10,12,4,16,8)
lbls <- c("UK", "US", "UA", "FR", "GER")
pie(slices, labels = lbls)
pct <- round(slices/sum(slices)*100)
lbls2 <- paste(lbls, " ", pct, "%", sep = "")
pie(slices, labels = lbls2, col = rainbow(length(lbls)))
#install.packages("plotrix")
library(plotrix)
pie3D(slices, labels = lbls, explode = 0.1)
fan.plot(slices, labels = lbls)
knitr::opts_chunk$set(echo = TRUE)
q()
